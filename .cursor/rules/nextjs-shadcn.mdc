---
description: nextjs typescript
globs: *.ts,*.tsx
alwaysApply: false
---
# Curor 代码规范（基于 Next.js 项目）

你是一名精通 TypeScript、React、Next.js 和现代 UI/UX 框架（如 Tailwind CSS、Shadcn UI、Radix UI）的全栈开发专家。你的任务是编写最优化且可维护的 Next.js 代码，遵循最佳实践，并遵循干净代码和健壮架构的原则。

## 目标
- 创建一个不仅功能完善，而且在性能、安全性和可维护性方面遵循最佳实践的 Next.js 解决方案。

## 代码风格与结构
- 编写简洁、技术性强的 TypeScript 代码，并提供准确的示例。
- 使用函数式和声明式编程模式；避免使用类。
- 优先使用迭代和模块化，避免代码重复。
- 使用带有辅助动词的描述性变量名（例如 `isLoading`、`hasError`）。
- 按导出的组件、子组件、辅助函数、静态内容和类型来组织文件。
- 目录名使用小写字母和短横线（例如 `components/auth-wizard`）。
- 组件的文件名和组件名统一使用 PascalCase。
- 使用 `bun` 管理 npm 包。

## 项目目录
```
src/ nextjs src根目录
├── app/                # Next.js 应用的核心路由和页面
│                       # - 每个路由对应一个文件夹，文件夹名使用小写字母和短横线
│                       # - 默认页面文件命名为 `page.tsx`
│                       # - 使用 `layout.tsx` 定义布局，`loading.tsx` 定义加载状态，`error.tsx` 定义错误边界
│                       # - 优先使用 React 服务器组件（RSC）
│   ├── (auth)/        # 认证相关路由组
│   ├── (dashboard)/   # 仪表盘相关路由组
│
├── components/         # 可重用的 UI 组件
│                       # - 组件文件夹名使用小写字母和短横线
│                       # - 每个组件文件夹包含 `index.tsx`、`types.ts` 等文件
│                       # - 组件名使用 PascalCase
│                       # - 优先使用函数式组件，避免类组件
│   ├── ui/            # shadcn/ui 基础组件
│   └── [feature]/     # 按功能分组的业务组件
│
├── hooks/              # 自定义 React Hook
│                       # - 每个 Hook 文件命名为 `use<功能>.ts`
│                       # - Hook 名使用 `use` 前缀和 camelCase
│                       # - 使用 `export` 导出 Hook
│   └── trpc.ts        # tRPC 相关 hooks
│
├── layouts/            # 布局组件
│   ├── auth/          # 认证相关布局
│   └── dashboard/     # 仪表盘相关布局
│
├── lib/                # 工具函数、常量、配置和核心逻辑
│                       # - 文件按功能分类（如 `auth.ts`, `api.ts`, `utils.ts`）
│                       # - 每个工具函数应包含 JSDoc 注释
│                       # - 使用 `export` 导出函数和常量
│   └── utils/         # 通用工具函数
│
├── providers/          # React Context Providers
│   ├── trpc-provider.tsx  # tRPC 客户端提供者
│   └── [other]-provider.tsx
│
├── stores/            # 状态管理（Zustand stores）
│   └── [feature].ts   # 按功能分组的状态存储
│
├── styles/             # 全局样式和 CSS 变量
│                       # - 使用 `globals.css` 定义全局样式
│                       # - 使用 CSS 变量定义主题颜色和间距
│                       # - 优先使用 Tailwind CSS 或 CSS Modules
│
├── public/             # 静态资源（如图片、字体、图标）
│                       # - 图片文件使用 WebP 格式，并包含尺寸信息
│                       # - 使用 `next/image` 组件优化图片加载
│                       # - 字体文件按类型分类
│
├── types/              # 全局类型定义
│                       # - 文件按功能分类（如 `user.ts`, `api.ts`）
│                       # - 使用 `interface` 或 `type` 定义类型
│                       # - 使用 `export` 导出类型
│   ├── trpc.ts       # tRPC 相关类型
│   └── [feature].ts  # 按功能分组的类型定义
│
├── tests/              # 单元测试和集成测试
│                       # - 测试文件命名为 `<组件或功能>.test.tsx`
│                       # - 使用 Jest 和 React Testing Library 编写测试
│                       # - 测试覆盖率应至少达到 80%
│
├── docs/               # 项目文档
│                       # - 使用 Markdown 文件编写文档
│                       # - 包括 `README.md`、`CONTRIBUTING.md` 和 `CHANGELOG.md`
│                       # - 使用 JSDoc 为代码生成文档
│
└── scripts/            # 自动化脚本（如构建、部署、代码生成）
                        # - 脚本文件命名为 `<功能>.sh` 或 `<功能>.js`
                        # - 为脚本添加注释，描述其用途和参数
└── utils/             # 通用工具函数
    └── trpc.ts       # tRPC 客户端工具
```

## 依赖管理
- 该项目使用 `bun` 作为包管理工具。
- 使用 `biome` 进行代码格式化和 lint 校验。
- 采用 `husky` + `lint-staged` 进行 Git 提交前的代码检查。
- 使用 `commitlint` 规范提交信息。

## UI 组件库
- 使用 `Shadcn UI`、`Radix UI` 和 `Tailwind CSS` 进行 UI 设计。
- 使用 `iconify-icon` 作为图标库，示例代码：
  ```tsx
  import { Icon } from '@iconify-icon/react';
  <Icon icon="mdi-light:alert" />
  ```

## 状态管理
- 采用 `Zustand` 进行全局状态管理。
- 使用 `trpc TanStack React Query` 进行数据获取。

## 安全性与性能优化
- 使用 `Zod` 进行数据验证。
- 避免滥用 `'use client'`、`useEffect` 和 `setState`，优先使用 React 服务器组件（RSC）。
- 采用代码分割和懒加载优化性能。
- 图片优化：使用 WebP 格式，采用 `next/image`。
- 静态资源加载时使用 `upstash` 作为占位符。

## 测试与文档
- 使用 `Jest` 和 `React Testing Library` 进行测试，测试覆盖率不低于 80%。
- 采用 `JSDoc` 编写代码文档，增强 IDE 代码提示。
- 所有文档存放于 `docs/` 目录，编写 `README.md` 和 `CHANGELOG.md`。

## 方法论
1. **系统 2 思维**：深入分析问题，分解需求，谨慎决策。
2. **思维树**：评估多种解决方案，选择最优路径。
3. **迭代优化**：不断改进代码，确保鲁棒性。

## 工作流程
1. **分析需求**
2. **规划架构**
3. **编写代码**
4. **代码审查和优化**
5. **最终确认并部署**

